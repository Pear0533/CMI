//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("09/12/2024 15:06:55")]

namespace AxWMPLib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{6bf52a52-394a-11d3-b153-00c04f79faa6}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    public class AxWindowsMediaPlayer : System.Windows.Forms.AxHost {
        
        private WMPLib.IWMPPlayer4 ocx;
        
        private AxWindowsMediaPlayerEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxWindowsMediaPlayer() : 
                base("6bf52a52-394a-11d3-b153-00c04f79faa6") {
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual string URL {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("URL", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.URL;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("URL", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.URL = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual WMPLib.WMPOpenState openState {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("openState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.openState;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual WMPLib.WMPPlayState playState {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("playState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.playState;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual WMPLib.IWMPControls Ctlcontrols {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Ctlcontrols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.controls;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual WMPLib.IWMPSettings settings {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("settings", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.settings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual WMPLib.IWMPMedia currentMedia {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("currentMedia", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.currentMedia;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("currentMedia", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.currentMedia = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual WMPLib.IWMPMediaCollection mediaCollection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("mediaCollection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.mediaCollection;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual WMPLib.IWMPPlaylistCollection playlistCollection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("playlistCollection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.playlistCollection;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual string versionInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("versionInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.versionInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual WMPLib.IWMPNetwork network {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("network", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.network;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual WMPLib.IWMPPlaylist currentPlaylist {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("currentPlaylist", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.currentPlaylist;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("currentPlaylist", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.currentPlaylist = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual WMPLib.IWMPCdromCollection cdromCollection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("cdromCollection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.cdromCollection;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual WMPLib.IWMPClosedCaption closedCaption {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("closedCaption", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.closedCaption;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool isOnline {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("isOnline", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.isOnline;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual WMPLib.IWMPError Error {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Error;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual string status {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("status", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.status;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual WMPLib.IWMPDVD dvd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("dvd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.dvd;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Ctlenabled {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Ctlenabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.enabled;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Ctlenabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.enabled = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual bool fullScreen {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("fullScreen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.fullScreen;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("fullScreen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.fullScreen = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual bool enableContextMenu {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("enableContextMenu", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.enableContextMenu;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("enableContextMenu", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.enableContextMenu = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual string uiMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("uiMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.uiMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("uiMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.uiMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual bool stretchToFit {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("stretchToFit", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.stretchToFit;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("stretchToFit", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.stretchToFit = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool windowlessVideo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("windowlessVideo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.windowlessVideo;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("windowlessVideo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.windowlessVideo = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual bool isRemote {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("isRemote", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.isRemote;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual WMPLib.IWMPPlayerApplication playerApplication {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("playerApplication", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.playerApplication;
            }
        }
        
        public event _WMPOCXEvents_OpenStateChangeEventHandler OpenStateChange;
        
        public event _WMPOCXEvents_PlayStateChangeEventHandler PlayStateChange;
        
        public event _WMPOCXEvents_AudioLanguageChangeEventHandler AudioLanguageChange;
        
        public event System.EventHandler StatusChange;
        
        public event _WMPOCXEvents_ScriptCommandEventHandler ScriptCommand;
        
        public event System.EventHandler NewStream;
        
        public event _WMPOCXEvents_DisconnectEventHandler Disconnect;
        
        public event _WMPOCXEvents_BufferingEventHandler Buffering;
        
        public event System.EventHandler ErrorEvent;
        
        public event _WMPOCXEvents_WarningEventHandler Warning;
        
        public event _WMPOCXEvents_EndOfStreamEventHandler EndOfStream;
        
        public event _WMPOCXEvents_PositionChangeEventHandler PositionChange;
        
        public event _WMPOCXEvents_MarkerHitEventHandler MarkerHit;
        
        public event _WMPOCXEvents_DurationUnitChangeEventHandler DurationUnitChange;
        
        public event _WMPOCXEvents_CdromMediaChangeEventHandler CdromMediaChange;
        
        public event _WMPOCXEvents_PlaylistChangeEventHandler PlaylistChange;
        
        public event _WMPOCXEvents_CurrentPlaylistChangeEventHandler CurrentPlaylistChange;
        
        public event _WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler CurrentPlaylistItemAvailable;
        
        public event _WMPOCXEvents_MediaChangeEventHandler MediaChange;
        
        public event _WMPOCXEvents_CurrentMediaItemAvailableEventHandler CurrentMediaItemAvailable;
        
        public event _WMPOCXEvents_CurrentItemChangeEventHandler CurrentItemChange;
        
        public event System.EventHandler MediaCollectionChange;
        
        public event _WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler MediaCollectionAttributeStringAdded;
        
        public event _WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler MediaCollectionAttributeStringRemoved;
        
        public event _WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler MediaCollectionAttributeStringChanged;
        
        public event System.EventHandler PlaylistCollectionChange;
        
        public event _WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler PlaylistCollectionPlaylistAdded;
        
        public event _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler PlaylistCollectionPlaylistRemoved;
        
        public event _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler PlaylistCollectionPlaylistSetAsDeleted;
        
        public event _WMPOCXEvents_ModeChangeEventHandler ModeChange;
        
        public event _WMPOCXEvents_MediaErrorEventHandler MediaError;
        
        public event _WMPOCXEvents_OpenPlaylistSwitchEventHandler OpenPlaylistSwitch;
        
        public event _WMPOCXEvents_DomainChangeEventHandler DomainChange;
        
        public event System.EventHandler SwitchedToPlayerApplication;
        
        public event System.EventHandler SwitchedToControl;
        
        public event System.EventHandler PlayerDockedStateChange;
        
        public event System.EventHandler PlayerReconnect;
        
        public event _WMPOCXEvents_ClickEventHandler ClickEvent;
        
        public event _WMPOCXEvents_DoubleClickEventHandler DoubleClickEvent;
        
        public event _WMPOCXEvents_KeyDownEventHandler KeyDownEvent;
        
        public event _WMPOCXEvents_KeyPressEventHandler KeyPressEvent;
        
        public event _WMPOCXEvents_KeyUpEventHandler KeyUpEvent;
        
        public event _WMPOCXEvents_MouseDownEventHandler MouseDownEvent;
        
        public event _WMPOCXEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _WMPOCXEvents_MouseUpEventHandler MouseUpEvent;
        
        public event _WMPOCXEvents_DeviceConnectEventHandler DeviceConnect;
        
        public event _WMPOCXEvents_DeviceDisconnectEventHandler DeviceDisconnect;
        
        public event _WMPOCXEvents_DeviceStatusChangeEventHandler DeviceStatusChange;
        
        public event _WMPOCXEvents_DeviceSyncStateChangeEventHandler DeviceSyncStateChange;
        
        public event _WMPOCXEvents_DeviceSyncErrorEventHandler DeviceSyncError;
        
        public event _WMPOCXEvents_CreatePartnershipCompleteEventHandler CreatePartnershipComplete;
        
        public event _WMPOCXEvents_DeviceEstimationEventHandler DeviceEstimation;
        
        public event _WMPOCXEvents_CdromRipStateChangeEventHandler CdromRipStateChange;
        
        public event _WMPOCXEvents_CdromRipMediaErrorEventHandler CdromRipMediaError;
        
        public event _WMPOCXEvents_CdromBurnStateChangeEventHandler CdromBurnStateChange;
        
        public event _WMPOCXEvents_CdromBurnMediaErrorEventHandler CdromBurnMediaError;
        
        public event _WMPOCXEvents_CdromBurnErrorEventHandler CdromBurnError;
        
        public event _WMPOCXEvents_LibraryConnectEventHandler LibraryConnect;
        
        public event _WMPOCXEvents_LibraryDisconnectEventHandler LibraryDisconnect;
        
        public event _WMPOCXEvents_FolderScanStateChangeEventHandler FolderScanStateChange;
        
        public event _WMPOCXEvents_StringCollectionChangeEventHandler StringCollectionChange;
        
        public event _WMPOCXEvents_MediaCollectionMediaAddedEventHandler MediaCollectionMediaAdded;
        
        public event _WMPOCXEvents_MediaCollectionMediaRemovedEventHandler MediaCollectionMediaRemoved;
        
        public virtual void close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.close();
        }
        
        public virtual void launchURL(string bstrURL) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("launchURL", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.launchURL(bstrURL);
        }
        
        public virtual WMPLib.IWMPPlaylist newPlaylist(string bstrName, string bstrURL) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("newPlaylist", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            WMPLib.IWMPPlaylist returnValue = ((WMPLib.IWMPPlaylist)(this.ocx.newPlaylist(bstrName, bstrURL)));
            return returnValue;
        }
        
        public virtual WMPLib.IWMPMedia newMedia(string bstrURL) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("newMedia", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            WMPLib.IWMPMedia returnValue = ((WMPLib.IWMPMedia)(this.ocx.newMedia(bstrURL)));
            return returnValue;
        }
        
        public virtual void openPlayer(string bstrURL) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("openPlayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.openPlayer(bstrURL);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxWindowsMediaPlayerEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(WMPLib._WMPOCXEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((WMPLib.IWMPPlayer4)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOpenStateChange(object sender, _WMPOCXEvents_OpenStateChangeEvent e) {
            if ((this.OpenStateChange != null)) {
                this.OpenStateChange(sender, e);
            }
        }
        
        internal void RaiseOnPlayStateChange(object sender, _WMPOCXEvents_PlayStateChangeEvent e) {
            if ((this.PlayStateChange != null)) {
                this.PlayStateChange(sender, e);
            }
        }
        
        internal void RaiseOnAudioLanguageChange(object sender, _WMPOCXEvents_AudioLanguageChangeEvent e) {
            if ((this.AudioLanguageChange != null)) {
                this.AudioLanguageChange(sender, e);
            }
        }
        
        internal void RaiseOnStatusChange(object sender, System.EventArgs e) {
            if ((this.StatusChange != null)) {
                this.StatusChange(sender, e);
            }
        }
        
        internal void RaiseOnScriptCommand(object sender, _WMPOCXEvents_ScriptCommandEvent e) {
            if ((this.ScriptCommand != null)) {
                this.ScriptCommand(sender, e);
            }
        }
        
        internal void RaiseOnNewStream(object sender, System.EventArgs e) {
            if ((this.NewStream != null)) {
                this.NewStream(sender, e);
            }
        }
        
        internal void RaiseOnDisconnect(object sender, _WMPOCXEvents_DisconnectEvent e) {
            if ((this.Disconnect != null)) {
                this.Disconnect(sender, e);
            }
        }
        
        internal void RaiseOnBuffering(object sender, _WMPOCXEvents_BufferingEvent e) {
            if ((this.Buffering != null)) {
                this.Buffering(sender, e);
            }
        }
        
        internal void RaiseOnErrorEvent(object sender, System.EventArgs e) {
            if ((this.ErrorEvent != null)) {
                this.ErrorEvent(sender, e);
            }
        }
        
        internal void RaiseOnWarning(object sender, _WMPOCXEvents_WarningEvent e) {
            if ((this.Warning != null)) {
                this.Warning(sender, e);
            }
        }
        
        internal void RaiseOnEndOfStream(object sender, _WMPOCXEvents_EndOfStreamEvent e) {
            if ((this.EndOfStream != null)) {
                this.EndOfStream(sender, e);
            }
        }
        
        internal void RaiseOnPositionChange(object sender, _WMPOCXEvents_PositionChangeEvent e) {
            if ((this.PositionChange != null)) {
                this.PositionChange(sender, e);
            }
        }
        
        internal void RaiseOnMarkerHit(object sender, _WMPOCXEvents_MarkerHitEvent e) {
            if ((this.MarkerHit != null)) {
                this.MarkerHit(sender, e);
            }
        }
        
        internal void RaiseOnDurationUnitChange(object sender, _WMPOCXEvents_DurationUnitChangeEvent e) {
            if ((this.DurationUnitChange != null)) {
                this.DurationUnitChange(sender, e);
            }
        }
        
        internal void RaiseOnCdromMediaChange(object sender, _WMPOCXEvents_CdromMediaChangeEvent e) {
            if ((this.CdromMediaChange != null)) {
                this.CdromMediaChange(sender, e);
            }
        }
        
        internal void RaiseOnPlaylistChange(object sender, _WMPOCXEvents_PlaylistChangeEvent e) {
            if ((this.PlaylistChange != null)) {
                this.PlaylistChange(sender, e);
            }
        }
        
        internal void RaiseOnCurrentPlaylistChange(object sender, _WMPOCXEvents_CurrentPlaylistChangeEvent e) {
            if ((this.CurrentPlaylistChange != null)) {
                this.CurrentPlaylistChange(sender, e);
            }
        }
        
        internal void RaiseOnCurrentPlaylistItemAvailable(object sender, _WMPOCXEvents_CurrentPlaylistItemAvailableEvent e) {
            if ((this.CurrentPlaylistItemAvailable != null)) {
                this.CurrentPlaylistItemAvailable(sender, e);
            }
        }
        
        internal void RaiseOnMediaChange(object sender, _WMPOCXEvents_MediaChangeEvent e) {
            if ((this.MediaChange != null)) {
                this.MediaChange(sender, e);
            }
        }
        
        internal void RaiseOnCurrentMediaItemAvailable(object sender, _WMPOCXEvents_CurrentMediaItemAvailableEvent e) {
            if ((this.CurrentMediaItemAvailable != null)) {
                this.CurrentMediaItemAvailable(sender, e);
            }
        }
        
        internal void RaiseOnCurrentItemChange(object sender, _WMPOCXEvents_CurrentItemChangeEvent e) {
            if ((this.CurrentItemChange != null)) {
                this.CurrentItemChange(sender, e);
            }
        }
        
        internal void RaiseOnMediaCollectionChange(object sender, System.EventArgs e) {
            if ((this.MediaCollectionChange != null)) {
                this.MediaCollectionChange(sender, e);
            }
        }
        
        internal void RaiseOnMediaCollectionAttributeStringAdded(object sender, _WMPOCXEvents_MediaCollectionAttributeStringAddedEvent e) {
            if ((this.MediaCollectionAttributeStringAdded != null)) {
                this.MediaCollectionAttributeStringAdded(sender, e);
            }
        }
        
        internal void RaiseOnMediaCollectionAttributeStringRemoved(object sender, _WMPOCXEvents_MediaCollectionAttributeStringRemovedEvent e) {
            if ((this.MediaCollectionAttributeStringRemoved != null)) {
                this.MediaCollectionAttributeStringRemoved(sender, e);
            }
        }
        
        internal void RaiseOnMediaCollectionAttributeStringChanged(object sender, _WMPOCXEvents_MediaCollectionAttributeStringChangedEvent e) {
            if ((this.MediaCollectionAttributeStringChanged != null)) {
                this.MediaCollectionAttributeStringChanged(sender, e);
            }
        }
        
        internal void RaiseOnPlaylistCollectionChange(object sender, System.EventArgs e) {
            if ((this.PlaylistCollectionChange != null)) {
                this.PlaylistCollectionChange(sender, e);
            }
        }
        
        internal void RaiseOnPlaylistCollectionPlaylistAdded(object sender, _WMPOCXEvents_PlaylistCollectionPlaylistAddedEvent e) {
            if ((this.PlaylistCollectionPlaylistAdded != null)) {
                this.PlaylistCollectionPlaylistAdded(sender, e);
            }
        }
        
        internal void RaiseOnPlaylistCollectionPlaylistRemoved(object sender, _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEvent e) {
            if ((this.PlaylistCollectionPlaylistRemoved != null)) {
                this.PlaylistCollectionPlaylistRemoved(sender, e);
            }
        }
        
        internal void RaiseOnPlaylistCollectionPlaylistSetAsDeleted(object sender, _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEvent e) {
            if ((this.PlaylistCollectionPlaylistSetAsDeleted != null)) {
                this.PlaylistCollectionPlaylistSetAsDeleted(sender, e);
            }
        }
        
        internal void RaiseOnModeChange(object sender, _WMPOCXEvents_ModeChangeEvent e) {
            if ((this.ModeChange != null)) {
                this.ModeChange(sender, e);
            }
        }
        
        internal void RaiseOnMediaError(object sender, _WMPOCXEvents_MediaErrorEvent e) {
            if ((this.MediaError != null)) {
                this.MediaError(sender, e);
            }
        }
        
        internal void RaiseOnOpenPlaylistSwitch(object sender, _WMPOCXEvents_OpenPlaylistSwitchEvent e) {
            if ((this.OpenPlaylistSwitch != null)) {
                this.OpenPlaylistSwitch(sender, e);
            }
        }
        
        internal void RaiseOnDomainChange(object sender, _WMPOCXEvents_DomainChangeEvent e) {
            if ((this.DomainChange != null)) {
                this.DomainChange(sender, e);
            }
        }
        
        internal void RaiseOnSwitchedToPlayerApplication(object sender, System.EventArgs e) {
            if ((this.SwitchedToPlayerApplication != null)) {
                this.SwitchedToPlayerApplication(sender, e);
            }
        }
        
        internal void RaiseOnSwitchedToControl(object sender, System.EventArgs e) {
            if ((this.SwitchedToControl != null)) {
                this.SwitchedToControl(sender, e);
            }
        }
        
        internal void RaiseOnPlayerDockedStateChange(object sender, System.EventArgs e) {
            if ((this.PlayerDockedStateChange != null)) {
                this.PlayerDockedStateChange(sender, e);
            }
        }
        
        internal void RaiseOnPlayerReconnect(object sender, System.EventArgs e) {
            if ((this.PlayerReconnect != null)) {
                this.PlayerReconnect(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, _WMPOCXEvents_ClickEvent e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDoubleClickEvent(object sender, _WMPOCXEvents_DoubleClickEvent e) {
            if ((this.DoubleClickEvent != null)) {
                this.DoubleClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, _WMPOCXEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, _WMPOCXEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, _WMPOCXEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _WMPOCXEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _WMPOCXEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _WMPOCXEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnDeviceConnect(object sender, _WMPOCXEvents_DeviceConnectEvent e) {
            if ((this.DeviceConnect != null)) {
                this.DeviceConnect(sender, e);
            }
        }
        
        internal void RaiseOnDeviceDisconnect(object sender, _WMPOCXEvents_DeviceDisconnectEvent e) {
            if ((this.DeviceDisconnect != null)) {
                this.DeviceDisconnect(sender, e);
            }
        }
        
        internal void RaiseOnDeviceStatusChange(object sender, _WMPOCXEvents_DeviceStatusChangeEvent e) {
            if ((this.DeviceStatusChange != null)) {
                this.DeviceStatusChange(sender, e);
            }
        }
        
        internal void RaiseOnDeviceSyncStateChange(object sender, _WMPOCXEvents_DeviceSyncStateChangeEvent e) {
            if ((this.DeviceSyncStateChange != null)) {
                this.DeviceSyncStateChange(sender, e);
            }
        }
        
        internal void RaiseOnDeviceSyncError(object sender, _WMPOCXEvents_DeviceSyncErrorEvent e) {
            if ((this.DeviceSyncError != null)) {
                this.DeviceSyncError(sender, e);
            }
        }
        
        internal void RaiseOnCreatePartnershipComplete(object sender, _WMPOCXEvents_CreatePartnershipCompleteEvent e) {
            if ((this.CreatePartnershipComplete != null)) {
                this.CreatePartnershipComplete(sender, e);
            }
        }
        
        internal void RaiseOnDeviceEstimation(object sender, _WMPOCXEvents_DeviceEstimationEvent e) {
            if ((this.DeviceEstimation != null)) {
                this.DeviceEstimation(sender, e);
            }
        }
        
        internal void RaiseOnCdromRipStateChange(object sender, _WMPOCXEvents_CdromRipStateChangeEvent e) {
            if ((this.CdromRipStateChange != null)) {
                this.CdromRipStateChange(sender, e);
            }
        }
        
        internal void RaiseOnCdromRipMediaError(object sender, _WMPOCXEvents_CdromRipMediaErrorEvent e) {
            if ((this.CdromRipMediaError != null)) {
                this.CdromRipMediaError(sender, e);
            }
        }
        
        internal void RaiseOnCdromBurnStateChange(object sender, _WMPOCXEvents_CdromBurnStateChangeEvent e) {
            if ((this.CdromBurnStateChange != null)) {
                this.CdromBurnStateChange(sender, e);
            }
        }
        
        internal void RaiseOnCdromBurnMediaError(object sender, _WMPOCXEvents_CdromBurnMediaErrorEvent e) {
            if ((this.CdromBurnMediaError != null)) {
                this.CdromBurnMediaError(sender, e);
            }
        }
        
        internal void RaiseOnCdromBurnError(object sender, _WMPOCXEvents_CdromBurnErrorEvent e) {
            if ((this.CdromBurnError != null)) {
                this.CdromBurnError(sender, e);
            }
        }
        
        internal void RaiseOnLibraryConnect(object sender, _WMPOCXEvents_LibraryConnectEvent e) {
            if ((this.LibraryConnect != null)) {
                this.LibraryConnect(sender, e);
            }
        }
        
        internal void RaiseOnLibraryDisconnect(object sender, _WMPOCXEvents_LibraryDisconnectEvent e) {
            if ((this.LibraryDisconnect != null)) {
                this.LibraryDisconnect(sender, e);
            }
        }
        
        internal void RaiseOnFolderScanStateChange(object sender, _WMPOCXEvents_FolderScanStateChangeEvent e) {
            if ((this.FolderScanStateChange != null)) {
                this.FolderScanStateChange(sender, e);
            }
        }
        
        internal void RaiseOnStringCollectionChange(object sender, _WMPOCXEvents_StringCollectionChangeEvent e) {
            if ((this.StringCollectionChange != null)) {
                this.StringCollectionChange(sender, e);
            }
        }
        
        internal void RaiseOnMediaCollectionMediaAdded(object sender, _WMPOCXEvents_MediaCollectionMediaAddedEvent e) {
            if ((this.MediaCollectionMediaAdded != null)) {
                this.MediaCollectionMediaAdded(sender, e);
            }
        }
        
        internal void RaiseOnMediaCollectionMediaRemoved(object sender, _WMPOCXEvents_MediaCollectionMediaRemovedEvent e) {
            if ((this.MediaCollectionMediaRemoved != null)) {
                this.MediaCollectionMediaRemoved(sender, e);
            }
        }
    }
    
    public delegate void _WMPOCXEvents_OpenStateChangeEventHandler(object sender, _WMPOCXEvents_OpenStateChangeEvent e);
    
    public class _WMPOCXEvents_OpenStateChangeEvent {
        
        public int newState;
        
        public _WMPOCXEvents_OpenStateChangeEvent(int newState) {
            this.newState = newState;
        }
    }
    
    public delegate void _WMPOCXEvents_PlayStateChangeEventHandler(object sender, _WMPOCXEvents_PlayStateChangeEvent e);
    
    public class _WMPOCXEvents_PlayStateChangeEvent {
        
        public int newState;
        
        public _WMPOCXEvents_PlayStateChangeEvent(int newState) {
            this.newState = newState;
        }
    }
    
    public delegate void _WMPOCXEvents_AudioLanguageChangeEventHandler(object sender, _WMPOCXEvents_AudioLanguageChangeEvent e);
    
    public class _WMPOCXEvents_AudioLanguageChangeEvent {
        
        public int langID;
        
        public _WMPOCXEvents_AudioLanguageChangeEvent(int langID) {
            this.langID = langID;
        }
    }
    
    public delegate void _WMPOCXEvents_ScriptCommandEventHandler(object sender, _WMPOCXEvents_ScriptCommandEvent e);
    
    public class _WMPOCXEvents_ScriptCommandEvent {
        
        public string scType;
        
        public string param;
        
        public _WMPOCXEvents_ScriptCommandEvent(string scType, string param) {
            this.scType = scType;
            this.param = param;
        }
    }
    
    public delegate void _WMPOCXEvents_DisconnectEventHandler(object sender, _WMPOCXEvents_DisconnectEvent e);
    
    public class _WMPOCXEvents_DisconnectEvent {
        
        public int result;
        
        public _WMPOCXEvents_DisconnectEvent(int result) {
            this.result = result;
        }
    }
    
    public delegate void _WMPOCXEvents_BufferingEventHandler(object sender, _WMPOCXEvents_BufferingEvent e);
    
    public class _WMPOCXEvents_BufferingEvent {
        
        public bool start;
        
        public _WMPOCXEvents_BufferingEvent(bool start) {
            this.start = start;
        }
    }
    
    public delegate void _WMPOCXEvents_WarningEventHandler(object sender, _WMPOCXEvents_WarningEvent e);
    
    public class _WMPOCXEvents_WarningEvent {
        
        public int warningType;
        
        public int param;
        
        public string description;
        
        public _WMPOCXEvents_WarningEvent(int warningType, int param, string description) {
            this.warningType = warningType;
            this.param = param;
            this.description = description;
        }
    }
    
    public delegate void _WMPOCXEvents_EndOfStreamEventHandler(object sender, _WMPOCXEvents_EndOfStreamEvent e);
    
    public class _WMPOCXEvents_EndOfStreamEvent {
        
        public int result;
        
        public _WMPOCXEvents_EndOfStreamEvent(int result) {
            this.result = result;
        }
    }
    
    public delegate void _WMPOCXEvents_PositionChangeEventHandler(object sender, _WMPOCXEvents_PositionChangeEvent e);
    
    public class _WMPOCXEvents_PositionChangeEvent {
        
        public double oldPosition;
        
        public double newPosition;
        
        public _WMPOCXEvents_PositionChangeEvent(double oldPosition, double newPosition) {
            this.oldPosition = oldPosition;
            this.newPosition = newPosition;
        }
    }
    
    public delegate void _WMPOCXEvents_MarkerHitEventHandler(object sender, _WMPOCXEvents_MarkerHitEvent e);
    
    public class _WMPOCXEvents_MarkerHitEvent {
        
        public int markerNum;
        
        public _WMPOCXEvents_MarkerHitEvent(int markerNum) {
            this.markerNum = markerNum;
        }
    }
    
    public delegate void _WMPOCXEvents_DurationUnitChangeEventHandler(object sender, _WMPOCXEvents_DurationUnitChangeEvent e);
    
    public class _WMPOCXEvents_DurationUnitChangeEvent {
        
        public int newDurationUnit;
        
        public _WMPOCXEvents_DurationUnitChangeEvent(int newDurationUnit) {
            this.newDurationUnit = newDurationUnit;
        }
    }
    
    public delegate void _WMPOCXEvents_CdromMediaChangeEventHandler(object sender, _WMPOCXEvents_CdromMediaChangeEvent e);
    
    public class _WMPOCXEvents_CdromMediaChangeEvent {
        
        public int cdromNum;
        
        public _WMPOCXEvents_CdromMediaChangeEvent(int cdromNum) {
            this.cdromNum = cdromNum;
        }
    }
    
    public delegate void _WMPOCXEvents_PlaylistChangeEventHandler(object sender, _WMPOCXEvents_PlaylistChangeEvent e);
    
    public class _WMPOCXEvents_PlaylistChangeEvent {
        
        public object playlist;
        
        public WMPLib.WMPPlaylistChangeEventType change;
        
        public _WMPOCXEvents_PlaylistChangeEvent(object playlist, WMPLib.WMPPlaylistChangeEventType change) {
            this.playlist = playlist;
            this.change = change;
        }
    }
    
    public delegate void _WMPOCXEvents_CurrentPlaylistChangeEventHandler(object sender, _WMPOCXEvents_CurrentPlaylistChangeEvent e);
    
    public class _WMPOCXEvents_CurrentPlaylistChangeEvent {
        
        public WMPLib.WMPPlaylistChangeEventType change;
        
        public _WMPOCXEvents_CurrentPlaylistChangeEvent(WMPLib.WMPPlaylistChangeEventType change) {
            this.change = change;
        }
    }
    
    public delegate void _WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler(object sender, _WMPOCXEvents_CurrentPlaylistItemAvailableEvent e);
    
    public class _WMPOCXEvents_CurrentPlaylistItemAvailableEvent {
        
        public string bstrItemName;
        
        public _WMPOCXEvents_CurrentPlaylistItemAvailableEvent(string bstrItemName) {
            this.bstrItemName = bstrItemName;
        }
    }
    
    public delegate void _WMPOCXEvents_MediaChangeEventHandler(object sender, _WMPOCXEvents_MediaChangeEvent e);
    
    public class _WMPOCXEvents_MediaChangeEvent {
        
        public object item;
        
        public _WMPOCXEvents_MediaChangeEvent(object item) {
            this.item = item;
        }
    }
    
    public delegate void _WMPOCXEvents_CurrentMediaItemAvailableEventHandler(object sender, _WMPOCXEvents_CurrentMediaItemAvailableEvent e);
    
    public class _WMPOCXEvents_CurrentMediaItemAvailableEvent {
        
        public string bstrItemName;
        
        public _WMPOCXEvents_CurrentMediaItemAvailableEvent(string bstrItemName) {
            this.bstrItemName = bstrItemName;
        }
    }
    
    public delegate void _WMPOCXEvents_CurrentItemChangeEventHandler(object sender, _WMPOCXEvents_CurrentItemChangeEvent e);
    
    public class _WMPOCXEvents_CurrentItemChangeEvent {
        
        public object pdispMedia;
        
        public _WMPOCXEvents_CurrentItemChangeEvent(object pdispMedia) {
            this.pdispMedia = pdispMedia;
        }
    }
    
    public delegate void _WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler(object sender, _WMPOCXEvents_MediaCollectionAttributeStringAddedEvent e);
    
    public class _WMPOCXEvents_MediaCollectionAttributeStringAddedEvent {
        
        public string bstrAttribName;
        
        public string bstrAttribVal;
        
        public _WMPOCXEvents_MediaCollectionAttributeStringAddedEvent(string bstrAttribName, string bstrAttribVal) {
            this.bstrAttribName = bstrAttribName;
            this.bstrAttribVal = bstrAttribVal;
        }
    }
    
    public delegate void _WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler(object sender, _WMPOCXEvents_MediaCollectionAttributeStringRemovedEvent e);
    
    public class _WMPOCXEvents_MediaCollectionAttributeStringRemovedEvent {
        
        public string bstrAttribName;
        
        public string bstrAttribVal;
        
        public _WMPOCXEvents_MediaCollectionAttributeStringRemovedEvent(string bstrAttribName, string bstrAttribVal) {
            this.bstrAttribName = bstrAttribName;
            this.bstrAttribVal = bstrAttribVal;
        }
    }
    
    public delegate void _WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler(object sender, _WMPOCXEvents_MediaCollectionAttributeStringChangedEvent e);
    
    public class _WMPOCXEvents_MediaCollectionAttributeStringChangedEvent {
        
        public string bstrAttribName;
        
        public string bstrOldAttribVal;
        
        public string bstrNewAttribVal;
        
        public _WMPOCXEvents_MediaCollectionAttributeStringChangedEvent(string bstrAttribName, string bstrOldAttribVal, string bstrNewAttribVal) {
            this.bstrAttribName = bstrAttribName;
            this.bstrOldAttribVal = bstrOldAttribVal;
            this.bstrNewAttribVal = bstrNewAttribVal;
        }
    }
    
    public delegate void _WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler(object sender, _WMPOCXEvents_PlaylistCollectionPlaylistAddedEvent e);
    
    public class _WMPOCXEvents_PlaylistCollectionPlaylistAddedEvent {
        
        public string bstrPlaylistName;
        
        public _WMPOCXEvents_PlaylistCollectionPlaylistAddedEvent(string bstrPlaylistName) {
            this.bstrPlaylistName = bstrPlaylistName;
        }
    }
    
    public delegate void _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler(object sender, _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEvent e);
    
    public class _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEvent {
        
        public string bstrPlaylistName;
        
        public _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEvent(string bstrPlaylistName) {
            this.bstrPlaylistName = bstrPlaylistName;
        }
    }
    
    public delegate void _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler(object sender, _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEvent e);
    
    public class _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEvent {
        
        public string bstrPlaylistName;
        
        public bool varfIsDeleted;
        
        public _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEvent(string bstrPlaylistName, bool varfIsDeleted) {
            this.bstrPlaylistName = bstrPlaylistName;
            this.varfIsDeleted = varfIsDeleted;
        }
    }
    
    public delegate void _WMPOCXEvents_ModeChangeEventHandler(object sender, _WMPOCXEvents_ModeChangeEvent e);
    
    public class _WMPOCXEvents_ModeChangeEvent {
        
        public string modeName;
        
        public bool newValue;
        
        public _WMPOCXEvents_ModeChangeEvent(string modeName, bool newValue) {
            this.modeName = modeName;
            this.newValue = newValue;
        }
    }
    
    public delegate void _WMPOCXEvents_MediaErrorEventHandler(object sender, _WMPOCXEvents_MediaErrorEvent e);
    
    public class _WMPOCXEvents_MediaErrorEvent {
        
        public object pMediaObject;
        
        public _WMPOCXEvents_MediaErrorEvent(object pMediaObject) {
            this.pMediaObject = pMediaObject;
        }
    }
    
    public delegate void _WMPOCXEvents_OpenPlaylistSwitchEventHandler(object sender, _WMPOCXEvents_OpenPlaylistSwitchEvent e);
    
    public class _WMPOCXEvents_OpenPlaylistSwitchEvent {
        
        public object pItem;
        
        public _WMPOCXEvents_OpenPlaylistSwitchEvent(object pItem) {
            this.pItem = pItem;
        }
    }
    
    public delegate void _WMPOCXEvents_DomainChangeEventHandler(object sender, _WMPOCXEvents_DomainChangeEvent e);
    
    public class _WMPOCXEvents_DomainChangeEvent {
        
        public string strDomain;
        
        public _WMPOCXEvents_DomainChangeEvent(string strDomain) {
            this.strDomain = strDomain;
        }
    }
    
    public delegate void _WMPOCXEvents_ClickEventHandler(object sender, _WMPOCXEvents_ClickEvent e);
    
    public class _WMPOCXEvents_ClickEvent {
        
        public short nButton;
        
        public short nShiftState;
        
        public int fX;
        
        public int fY;
        
        public _WMPOCXEvents_ClickEvent(short nButton, short nShiftState, int fX, int fY) {
            this.nButton = nButton;
            this.nShiftState = nShiftState;
            this.fX = fX;
            this.fY = fY;
        }
    }
    
    public delegate void _WMPOCXEvents_DoubleClickEventHandler(object sender, _WMPOCXEvents_DoubleClickEvent e);
    
    public class _WMPOCXEvents_DoubleClickEvent {
        
        public short nButton;
        
        public short nShiftState;
        
        public int fX;
        
        public int fY;
        
        public _WMPOCXEvents_DoubleClickEvent(short nButton, short nShiftState, int fX, int fY) {
            this.nButton = nButton;
            this.nShiftState = nShiftState;
            this.fX = fX;
            this.fY = fY;
        }
    }
    
    public delegate void _WMPOCXEvents_KeyDownEventHandler(object sender, _WMPOCXEvents_KeyDownEvent e);
    
    public class _WMPOCXEvents_KeyDownEvent {
        
        public short nKeyCode;
        
        public short nShiftState;
        
        public _WMPOCXEvents_KeyDownEvent(short nKeyCode, short nShiftState) {
            this.nKeyCode = nKeyCode;
            this.nShiftState = nShiftState;
        }
    }
    
    public delegate void _WMPOCXEvents_KeyPressEventHandler(object sender, _WMPOCXEvents_KeyPressEvent e);
    
    public class _WMPOCXEvents_KeyPressEvent {
        
        public short nKeyAscii;
        
        public _WMPOCXEvents_KeyPressEvent(short nKeyAscii) {
            this.nKeyAscii = nKeyAscii;
        }
    }
    
    public delegate void _WMPOCXEvents_KeyUpEventHandler(object sender, _WMPOCXEvents_KeyUpEvent e);
    
    public class _WMPOCXEvents_KeyUpEvent {
        
        public short nKeyCode;
        
        public short nShiftState;
        
        public _WMPOCXEvents_KeyUpEvent(short nKeyCode, short nShiftState) {
            this.nKeyCode = nKeyCode;
            this.nShiftState = nShiftState;
        }
    }
    
    public delegate void _WMPOCXEvents_MouseDownEventHandler(object sender, _WMPOCXEvents_MouseDownEvent e);
    
    public class _WMPOCXEvents_MouseDownEvent {
        
        public short nButton;
        
        public short nShiftState;
        
        public int fX;
        
        public int fY;
        
        public _WMPOCXEvents_MouseDownEvent(short nButton, short nShiftState, int fX, int fY) {
            this.nButton = nButton;
            this.nShiftState = nShiftState;
            this.fX = fX;
            this.fY = fY;
        }
    }
    
    public delegate void _WMPOCXEvents_MouseMoveEventHandler(object sender, _WMPOCXEvents_MouseMoveEvent e);
    
    public class _WMPOCXEvents_MouseMoveEvent {
        
        public short nButton;
        
        public short nShiftState;
        
        public int fX;
        
        public int fY;
        
        public _WMPOCXEvents_MouseMoveEvent(short nButton, short nShiftState, int fX, int fY) {
            this.nButton = nButton;
            this.nShiftState = nShiftState;
            this.fX = fX;
            this.fY = fY;
        }
    }
    
    public delegate void _WMPOCXEvents_MouseUpEventHandler(object sender, _WMPOCXEvents_MouseUpEvent e);
    
    public class _WMPOCXEvents_MouseUpEvent {
        
        public short nButton;
        
        public short nShiftState;
        
        public int fX;
        
        public int fY;
        
        public _WMPOCXEvents_MouseUpEvent(short nButton, short nShiftState, int fX, int fY) {
            this.nButton = nButton;
            this.nShiftState = nShiftState;
            this.fX = fX;
            this.fY = fY;
        }
    }
    
    public delegate void _WMPOCXEvents_DeviceConnectEventHandler(object sender, _WMPOCXEvents_DeviceConnectEvent e);
    
    public class _WMPOCXEvents_DeviceConnectEvent {
        
        public WMPLib.IWMPSyncDevice pDevice;
        
        public _WMPOCXEvents_DeviceConnectEvent(WMPLib.IWMPSyncDevice pDevice) {
            this.pDevice = pDevice;
        }
    }
    
    public delegate void _WMPOCXEvents_DeviceDisconnectEventHandler(object sender, _WMPOCXEvents_DeviceDisconnectEvent e);
    
    public class _WMPOCXEvents_DeviceDisconnectEvent {
        
        public WMPLib.IWMPSyncDevice pDevice;
        
        public _WMPOCXEvents_DeviceDisconnectEvent(WMPLib.IWMPSyncDevice pDevice) {
            this.pDevice = pDevice;
        }
    }
    
    public delegate void _WMPOCXEvents_DeviceStatusChangeEventHandler(object sender, _WMPOCXEvents_DeviceStatusChangeEvent e);
    
    public class _WMPOCXEvents_DeviceStatusChangeEvent {
        
        public WMPLib.IWMPSyncDevice pDevice;
        
        public WMPLib.WMPDeviceStatus newStatus;
        
        public _WMPOCXEvents_DeviceStatusChangeEvent(WMPLib.IWMPSyncDevice pDevice, WMPLib.WMPDeviceStatus newStatus) {
            this.pDevice = pDevice;
            this.newStatus = newStatus;
        }
    }
    
    public delegate void _WMPOCXEvents_DeviceSyncStateChangeEventHandler(object sender, _WMPOCXEvents_DeviceSyncStateChangeEvent e);
    
    public class _WMPOCXEvents_DeviceSyncStateChangeEvent {
        
        public WMPLib.IWMPSyncDevice pDevice;
        
        public WMPLib.WMPSyncState newState;
        
        public _WMPOCXEvents_DeviceSyncStateChangeEvent(WMPLib.IWMPSyncDevice pDevice, WMPLib.WMPSyncState newState) {
            this.pDevice = pDevice;
            this.newState = newState;
        }
    }
    
    public delegate void _WMPOCXEvents_DeviceSyncErrorEventHandler(object sender, _WMPOCXEvents_DeviceSyncErrorEvent e);
    
    public class _WMPOCXEvents_DeviceSyncErrorEvent {
        
        public WMPLib.IWMPSyncDevice pDevice;
        
        public object pMedia;
        
        public _WMPOCXEvents_DeviceSyncErrorEvent(WMPLib.IWMPSyncDevice pDevice, object pMedia) {
            this.pDevice = pDevice;
            this.pMedia = pMedia;
        }
    }
    
    public delegate void _WMPOCXEvents_CreatePartnershipCompleteEventHandler(object sender, _WMPOCXEvents_CreatePartnershipCompleteEvent e);
    
    public class _WMPOCXEvents_CreatePartnershipCompleteEvent {
        
        public WMPLib.IWMPSyncDevice pDevice;
        
        public int hrResult;
        
        public _WMPOCXEvents_CreatePartnershipCompleteEvent(WMPLib.IWMPSyncDevice pDevice, int hrResult) {
            this.pDevice = pDevice;
            this.hrResult = hrResult;
        }
    }
    
    public delegate void _WMPOCXEvents_DeviceEstimationEventHandler(object sender, _WMPOCXEvents_DeviceEstimationEvent e);
    
    public class _WMPOCXEvents_DeviceEstimationEvent {
        
        public WMPLib.IWMPSyncDevice pDevice;
        
        public int hrResult;
        
        public long qwEstimatedUsedSpace;
        
        public long qwEstimatedSpace;
        
        public _WMPOCXEvents_DeviceEstimationEvent(WMPLib.IWMPSyncDevice pDevice, int hrResult, long qwEstimatedUsedSpace, long qwEstimatedSpace) {
            this.pDevice = pDevice;
            this.hrResult = hrResult;
            this.qwEstimatedUsedSpace = qwEstimatedUsedSpace;
            this.qwEstimatedSpace = qwEstimatedSpace;
        }
    }
    
    public delegate void _WMPOCXEvents_CdromRipStateChangeEventHandler(object sender, _WMPOCXEvents_CdromRipStateChangeEvent e);
    
    public class _WMPOCXEvents_CdromRipStateChangeEvent {
        
        public WMPLib.IWMPCdromRip pCdromRip;
        
        public WMPLib.WMPRipState wmprs;
        
        public _WMPOCXEvents_CdromRipStateChangeEvent(WMPLib.IWMPCdromRip pCdromRip, WMPLib.WMPRipState wmprs) {
            this.pCdromRip = pCdromRip;
            this.wmprs = wmprs;
        }
    }
    
    public delegate void _WMPOCXEvents_CdromRipMediaErrorEventHandler(object sender, _WMPOCXEvents_CdromRipMediaErrorEvent e);
    
    public class _WMPOCXEvents_CdromRipMediaErrorEvent {
        
        public WMPLib.IWMPCdromRip pCdromRip;
        
        public object pMedia;
        
        public _WMPOCXEvents_CdromRipMediaErrorEvent(WMPLib.IWMPCdromRip pCdromRip, object pMedia) {
            this.pCdromRip = pCdromRip;
            this.pMedia = pMedia;
        }
    }
    
    public delegate void _WMPOCXEvents_CdromBurnStateChangeEventHandler(object sender, _WMPOCXEvents_CdromBurnStateChangeEvent e);
    
    public class _WMPOCXEvents_CdromBurnStateChangeEvent {
        
        public WMPLib.IWMPCdromBurn pCdromBurn;
        
        public WMPLib.WMPBurnState wmpbs;
        
        public _WMPOCXEvents_CdromBurnStateChangeEvent(WMPLib.IWMPCdromBurn pCdromBurn, WMPLib.WMPBurnState wmpbs) {
            this.pCdromBurn = pCdromBurn;
            this.wmpbs = wmpbs;
        }
    }
    
    public delegate void _WMPOCXEvents_CdromBurnMediaErrorEventHandler(object sender, _WMPOCXEvents_CdromBurnMediaErrorEvent e);
    
    public class _WMPOCXEvents_CdromBurnMediaErrorEvent {
        
        public WMPLib.IWMPCdromBurn pCdromBurn;
        
        public object pMedia;
        
        public _WMPOCXEvents_CdromBurnMediaErrorEvent(WMPLib.IWMPCdromBurn pCdromBurn, object pMedia) {
            this.pCdromBurn = pCdromBurn;
            this.pMedia = pMedia;
        }
    }
    
    public delegate void _WMPOCXEvents_CdromBurnErrorEventHandler(object sender, _WMPOCXEvents_CdromBurnErrorEvent e);
    
    public class _WMPOCXEvents_CdromBurnErrorEvent {
        
        public WMPLib.IWMPCdromBurn pCdromBurn;
        
        public int hrError;
        
        public _WMPOCXEvents_CdromBurnErrorEvent(WMPLib.IWMPCdromBurn pCdromBurn, int hrError) {
            this.pCdromBurn = pCdromBurn;
            this.hrError = hrError;
        }
    }
    
    public delegate void _WMPOCXEvents_LibraryConnectEventHandler(object sender, _WMPOCXEvents_LibraryConnectEvent e);
    
    public class _WMPOCXEvents_LibraryConnectEvent {
        
        public WMPLib.IWMPLibrary pLibrary;
        
        public _WMPOCXEvents_LibraryConnectEvent(WMPLib.IWMPLibrary pLibrary) {
            this.pLibrary = pLibrary;
        }
    }
    
    public delegate void _WMPOCXEvents_LibraryDisconnectEventHandler(object sender, _WMPOCXEvents_LibraryDisconnectEvent e);
    
    public class _WMPOCXEvents_LibraryDisconnectEvent {
        
        public WMPLib.IWMPLibrary pLibrary;
        
        public _WMPOCXEvents_LibraryDisconnectEvent(WMPLib.IWMPLibrary pLibrary) {
            this.pLibrary = pLibrary;
        }
    }
    
    public delegate void _WMPOCXEvents_FolderScanStateChangeEventHandler(object sender, _WMPOCXEvents_FolderScanStateChangeEvent e);
    
    public class _WMPOCXEvents_FolderScanStateChangeEvent {
        
        public WMPLib.WMPFolderScanState wmpfss;
        
        public _WMPOCXEvents_FolderScanStateChangeEvent(WMPLib.WMPFolderScanState wmpfss) {
            this.wmpfss = wmpfss;
        }
    }
    
    public delegate void _WMPOCXEvents_StringCollectionChangeEventHandler(object sender, _WMPOCXEvents_StringCollectionChangeEvent e);
    
    public class _WMPOCXEvents_StringCollectionChangeEvent {
        
        public object pdispStringCollection;
        
        public WMPLib.WMPStringCollectionChangeEventType change;
        
        public int lCollectionIndex;
        
        public _WMPOCXEvents_StringCollectionChangeEvent(object pdispStringCollection, WMPLib.WMPStringCollectionChangeEventType change, int lCollectionIndex) {
            this.pdispStringCollection = pdispStringCollection;
            this.change = change;
            this.lCollectionIndex = lCollectionIndex;
        }
    }
    
    public delegate void _WMPOCXEvents_MediaCollectionMediaAddedEventHandler(object sender, _WMPOCXEvents_MediaCollectionMediaAddedEvent e);
    
    public class _WMPOCXEvents_MediaCollectionMediaAddedEvent {
        
        public object pdispMedia;
        
        public _WMPOCXEvents_MediaCollectionMediaAddedEvent(object pdispMedia) {
            this.pdispMedia = pdispMedia;
        }
    }
    
    public delegate void _WMPOCXEvents_MediaCollectionMediaRemovedEventHandler(object sender, _WMPOCXEvents_MediaCollectionMediaRemovedEvent e);
    
    public class _WMPOCXEvents_MediaCollectionMediaRemovedEvent {
        
        public object pdispMedia;
        
        public _WMPOCXEvents_MediaCollectionMediaRemovedEvent(object pdispMedia) {
            this.pdispMedia = pdispMedia;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxWindowsMediaPlayerEventMulticaster : WMPLib._WMPOCXEvents {
        
        private AxWindowsMediaPlayer parent;
        
        public AxWindowsMediaPlayerEventMulticaster(AxWindowsMediaPlayer parent) {
            this.parent = parent;
        }
        
        public virtual void OpenStateChange(int newState) {
            _WMPOCXEvents_OpenStateChangeEvent openstatechangeEvent = new _WMPOCXEvents_OpenStateChangeEvent(newState);
            this.parent.RaiseOnOpenStateChange(this.parent, openstatechangeEvent);
        }
        
        public virtual void PlayStateChange(int newState) {
            _WMPOCXEvents_PlayStateChangeEvent playstatechangeEvent = new _WMPOCXEvents_PlayStateChangeEvent(newState);
            this.parent.RaiseOnPlayStateChange(this.parent, playstatechangeEvent);
        }
        
        public virtual void AudioLanguageChange(int langID) {
            _WMPOCXEvents_AudioLanguageChangeEvent audiolanguagechangeEvent = new _WMPOCXEvents_AudioLanguageChangeEvent(langID);
            this.parent.RaiseOnAudioLanguageChange(this.parent, audiolanguagechangeEvent);
        }
        
        public virtual void StatusChange() {
            System.EventArgs statuschangeEvent = new System.EventArgs();
            this.parent.RaiseOnStatusChange(this.parent, statuschangeEvent);
        }
        
        public virtual void ScriptCommand(string scType, string param) {
            _WMPOCXEvents_ScriptCommandEvent scriptcommandEvent = new _WMPOCXEvents_ScriptCommandEvent(scType, param);
            this.parent.RaiseOnScriptCommand(this.parent, scriptcommandEvent);
        }
        
        public virtual void NewStream() {
            System.EventArgs newstreamEvent = new System.EventArgs();
            this.parent.RaiseOnNewStream(this.parent, newstreamEvent);
        }
        
        public virtual void Disconnect(int result) {
            _WMPOCXEvents_DisconnectEvent disconnectEvent = new _WMPOCXEvents_DisconnectEvent(result);
            this.parent.RaiseOnDisconnect(this.parent, disconnectEvent);
        }
        
        public virtual void Buffering(bool start) {
            _WMPOCXEvents_BufferingEvent bufferingEvent = new _WMPOCXEvents_BufferingEvent(start);
            this.parent.RaiseOnBuffering(this.parent, bufferingEvent);
        }
        
        public virtual void Error() {
            System.EventArgs errorEvent = new System.EventArgs();
            this.parent.RaiseOnErrorEvent(this.parent, errorEvent);
        }
        
        public virtual void Warning(int warningType, int param, string description) {
            _WMPOCXEvents_WarningEvent warningEvent = new _WMPOCXEvents_WarningEvent(warningType, param, description);
            this.parent.RaiseOnWarning(this.parent, warningEvent);
        }
        
        public virtual void EndOfStream(int result) {
            _WMPOCXEvents_EndOfStreamEvent endofstreamEvent = new _WMPOCXEvents_EndOfStreamEvent(result);
            this.parent.RaiseOnEndOfStream(this.parent, endofstreamEvent);
        }
        
        public virtual void PositionChange(double oldPosition, double newPosition) {
            _WMPOCXEvents_PositionChangeEvent positionchangeEvent = new _WMPOCXEvents_PositionChangeEvent(oldPosition, newPosition);
            this.parent.RaiseOnPositionChange(this.parent, positionchangeEvent);
        }
        
        public virtual void MarkerHit(int markerNum) {
            _WMPOCXEvents_MarkerHitEvent markerhitEvent = new _WMPOCXEvents_MarkerHitEvent(markerNum);
            this.parent.RaiseOnMarkerHit(this.parent, markerhitEvent);
        }
        
        public virtual void DurationUnitChange(int newDurationUnit) {
            _WMPOCXEvents_DurationUnitChangeEvent durationunitchangeEvent = new _WMPOCXEvents_DurationUnitChangeEvent(newDurationUnit);
            this.parent.RaiseOnDurationUnitChange(this.parent, durationunitchangeEvent);
        }
        
        public virtual void CdromMediaChange(int cdromNum) {
            _WMPOCXEvents_CdromMediaChangeEvent cdrommediachangeEvent = new _WMPOCXEvents_CdromMediaChangeEvent(cdromNum);
            this.parent.RaiseOnCdromMediaChange(this.parent, cdrommediachangeEvent);
        }
        
        public virtual void PlaylistChange(object playlist, WMPLib.WMPPlaylistChangeEventType change) {
            _WMPOCXEvents_PlaylistChangeEvent playlistchangeEvent = new _WMPOCXEvents_PlaylistChangeEvent(playlist, change);
            this.parent.RaiseOnPlaylistChange(this.parent, playlistchangeEvent);
        }
        
        public virtual void CurrentPlaylistChange(WMPLib.WMPPlaylistChangeEventType change) {
            _WMPOCXEvents_CurrentPlaylistChangeEvent currentplaylistchangeEvent = new _WMPOCXEvents_CurrentPlaylistChangeEvent(change);
            this.parent.RaiseOnCurrentPlaylistChange(this.parent, currentplaylistchangeEvent);
        }
        
        public virtual void CurrentPlaylistItemAvailable(string bstrItemName) {
            _WMPOCXEvents_CurrentPlaylistItemAvailableEvent currentplaylistitemavailableEvent = new _WMPOCXEvents_CurrentPlaylistItemAvailableEvent(bstrItemName);
            this.parent.RaiseOnCurrentPlaylistItemAvailable(this.parent, currentplaylistitemavailableEvent);
        }
        
        public virtual void MediaChange(object item) {
            _WMPOCXEvents_MediaChangeEvent mediachangeEvent = new _WMPOCXEvents_MediaChangeEvent(item);
            this.parent.RaiseOnMediaChange(this.parent, mediachangeEvent);
        }
        
        public virtual void CurrentMediaItemAvailable(string bstrItemName) {
            _WMPOCXEvents_CurrentMediaItemAvailableEvent currentmediaitemavailableEvent = new _WMPOCXEvents_CurrentMediaItemAvailableEvent(bstrItemName);
            this.parent.RaiseOnCurrentMediaItemAvailable(this.parent, currentmediaitemavailableEvent);
        }
        
        public virtual void CurrentItemChange(object pdispMedia) {
            _WMPOCXEvents_CurrentItemChangeEvent currentitemchangeEvent = new _WMPOCXEvents_CurrentItemChangeEvent(pdispMedia);
            this.parent.RaiseOnCurrentItemChange(this.parent, currentitemchangeEvent);
        }
        
        public virtual void MediaCollectionChange() {
            System.EventArgs mediacollectionchangeEvent = new System.EventArgs();
            this.parent.RaiseOnMediaCollectionChange(this.parent, mediacollectionchangeEvent);
        }
        
        public virtual void MediaCollectionAttributeStringAdded(string bstrAttribName, string bstrAttribVal) {
            _WMPOCXEvents_MediaCollectionAttributeStringAddedEvent mediacollectionattributestringaddedEvent = new _WMPOCXEvents_MediaCollectionAttributeStringAddedEvent(bstrAttribName, bstrAttribVal);
            this.parent.RaiseOnMediaCollectionAttributeStringAdded(this.parent, mediacollectionattributestringaddedEvent);
        }
        
        public virtual void MediaCollectionAttributeStringRemoved(string bstrAttribName, string bstrAttribVal) {
            _WMPOCXEvents_MediaCollectionAttributeStringRemovedEvent mediacollectionattributestringremovedEvent = new _WMPOCXEvents_MediaCollectionAttributeStringRemovedEvent(bstrAttribName, bstrAttribVal);
            this.parent.RaiseOnMediaCollectionAttributeStringRemoved(this.parent, mediacollectionattributestringremovedEvent);
        }
        
        public virtual void MediaCollectionAttributeStringChanged(string bstrAttribName, string bstrOldAttribVal, string bstrNewAttribVal) {
            _WMPOCXEvents_MediaCollectionAttributeStringChangedEvent mediacollectionattributestringchangedEvent = new _WMPOCXEvents_MediaCollectionAttributeStringChangedEvent(bstrAttribName, bstrOldAttribVal, bstrNewAttribVal);
            this.parent.RaiseOnMediaCollectionAttributeStringChanged(this.parent, mediacollectionattributestringchangedEvent);
        }
        
        public virtual void PlaylistCollectionChange() {
            System.EventArgs playlistcollectionchangeEvent = new System.EventArgs();
            this.parent.RaiseOnPlaylistCollectionChange(this.parent, playlistcollectionchangeEvent);
        }
        
        public virtual void PlaylistCollectionPlaylistAdded(string bstrPlaylistName) {
            _WMPOCXEvents_PlaylistCollectionPlaylistAddedEvent playlistcollectionplaylistaddedEvent = new _WMPOCXEvents_PlaylistCollectionPlaylistAddedEvent(bstrPlaylistName);
            this.parent.RaiseOnPlaylistCollectionPlaylistAdded(this.parent, playlistcollectionplaylistaddedEvent);
        }
        
        public virtual void PlaylistCollectionPlaylistRemoved(string bstrPlaylistName) {
            _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEvent playlistcollectionplaylistremovedEvent = new _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEvent(bstrPlaylistName);
            this.parent.RaiseOnPlaylistCollectionPlaylistRemoved(this.parent, playlistcollectionplaylistremovedEvent);
        }
        
        public virtual void PlaylistCollectionPlaylistSetAsDeleted(string bstrPlaylistName, bool varfIsDeleted) {
            _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEvent playlistcollectionplaylistsetasdeletedEvent = new _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEvent(bstrPlaylistName, varfIsDeleted);
            this.parent.RaiseOnPlaylistCollectionPlaylistSetAsDeleted(this.parent, playlistcollectionplaylistsetasdeletedEvent);
        }
        
        public virtual void ModeChange(string modeName, bool newValue) {
            _WMPOCXEvents_ModeChangeEvent modechangeEvent = new _WMPOCXEvents_ModeChangeEvent(modeName, newValue);
            this.parent.RaiseOnModeChange(this.parent, modechangeEvent);
        }
        
        public virtual void MediaError(object pMediaObject) {
            _WMPOCXEvents_MediaErrorEvent mediaerrorEvent = new _WMPOCXEvents_MediaErrorEvent(pMediaObject);
            this.parent.RaiseOnMediaError(this.parent, mediaerrorEvent);
        }
        
        public virtual void OpenPlaylistSwitch(object pItem) {
            _WMPOCXEvents_OpenPlaylistSwitchEvent openplaylistswitchEvent = new _WMPOCXEvents_OpenPlaylistSwitchEvent(pItem);
            this.parent.RaiseOnOpenPlaylistSwitch(this.parent, openplaylistswitchEvent);
        }
        
        public virtual void DomainChange(string strDomain) {
            _WMPOCXEvents_DomainChangeEvent domainchangeEvent = new _WMPOCXEvents_DomainChangeEvent(strDomain);
            this.parent.RaiseOnDomainChange(this.parent, domainchangeEvent);
        }
        
        public virtual void SwitchedToPlayerApplication() {
            System.EventArgs switchedtoplayerapplicationEvent = new System.EventArgs();
            this.parent.RaiseOnSwitchedToPlayerApplication(this.parent, switchedtoplayerapplicationEvent);
        }
        
        public virtual void SwitchedToControl() {
            System.EventArgs switchedtocontrolEvent = new System.EventArgs();
            this.parent.RaiseOnSwitchedToControl(this.parent, switchedtocontrolEvent);
        }
        
        public virtual void PlayerDockedStateChange() {
            System.EventArgs playerdockedstatechangeEvent = new System.EventArgs();
            this.parent.RaiseOnPlayerDockedStateChange(this.parent, playerdockedstatechangeEvent);
        }
        
        public virtual void PlayerReconnect() {
            System.EventArgs playerreconnectEvent = new System.EventArgs();
            this.parent.RaiseOnPlayerReconnect(this.parent, playerreconnectEvent);
        }
        
        public virtual void Click(short nButton, short nShiftState, int fX, int fY) {
            _WMPOCXEvents_ClickEvent clickEvent = new _WMPOCXEvents_ClickEvent(nButton, nShiftState, fX, fY);
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DoubleClick(short nButton, short nShiftState, int fX, int fY) {
            _WMPOCXEvents_DoubleClickEvent doubleclickEvent = new _WMPOCXEvents_DoubleClickEvent(nButton, nShiftState, fX, fY);
            this.parent.RaiseOnDoubleClickEvent(this.parent, doubleclickEvent);
        }
        
        public virtual void KeyDown(short nKeyCode, short nShiftState) {
            _WMPOCXEvents_KeyDownEvent keydownEvent = new _WMPOCXEvents_KeyDownEvent(nKeyCode, nShiftState);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
        }
        
        public virtual void KeyPress(short nKeyAscii) {
            _WMPOCXEvents_KeyPressEvent keypressEvent = new _WMPOCXEvents_KeyPressEvent(nKeyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
        }
        
        public virtual void KeyUp(short nKeyCode, short nShiftState) {
            _WMPOCXEvents_KeyUpEvent keyupEvent = new _WMPOCXEvents_KeyUpEvent(nKeyCode, nShiftState);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
        }
        
        public virtual void MouseDown(short nButton, short nShiftState, int fX, int fY) {
            _WMPOCXEvents_MouseDownEvent mousedownEvent = new _WMPOCXEvents_MouseDownEvent(nButton, nShiftState, fX, fY);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short nButton, short nShiftState, int fX, int fY) {
            _WMPOCXEvents_MouseMoveEvent mousemoveEvent = new _WMPOCXEvents_MouseMoveEvent(nButton, nShiftState, fX, fY);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short nButton, short nShiftState, int fX, int fY) {
            _WMPOCXEvents_MouseUpEvent mouseupEvent = new _WMPOCXEvents_MouseUpEvent(nButton, nShiftState, fX, fY);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void DeviceConnect(WMPLib.IWMPSyncDevice pDevice) {
            _WMPOCXEvents_DeviceConnectEvent deviceconnectEvent = new _WMPOCXEvents_DeviceConnectEvent(pDevice);
            this.parent.RaiseOnDeviceConnect(this.parent, deviceconnectEvent);
        }
        
        public virtual void DeviceDisconnect(WMPLib.IWMPSyncDevice pDevice) {
            _WMPOCXEvents_DeviceDisconnectEvent devicedisconnectEvent = new _WMPOCXEvents_DeviceDisconnectEvent(pDevice);
            this.parent.RaiseOnDeviceDisconnect(this.parent, devicedisconnectEvent);
        }
        
        public virtual void DeviceStatusChange(WMPLib.IWMPSyncDevice pDevice, WMPLib.WMPDeviceStatus newStatus) {
            _WMPOCXEvents_DeviceStatusChangeEvent devicestatuschangeEvent = new _WMPOCXEvents_DeviceStatusChangeEvent(pDevice, newStatus);
            this.parent.RaiseOnDeviceStatusChange(this.parent, devicestatuschangeEvent);
        }
        
        public virtual void DeviceSyncStateChange(WMPLib.IWMPSyncDevice pDevice, WMPLib.WMPSyncState newState) {
            _WMPOCXEvents_DeviceSyncStateChangeEvent devicesyncstatechangeEvent = new _WMPOCXEvents_DeviceSyncStateChangeEvent(pDevice, newState);
            this.parent.RaiseOnDeviceSyncStateChange(this.parent, devicesyncstatechangeEvent);
        }
        
        public virtual void DeviceSyncError(WMPLib.IWMPSyncDevice pDevice, object pMedia) {
            _WMPOCXEvents_DeviceSyncErrorEvent devicesyncerrorEvent = new _WMPOCXEvents_DeviceSyncErrorEvent(pDevice, pMedia);
            this.parent.RaiseOnDeviceSyncError(this.parent, devicesyncerrorEvent);
        }
        
        public virtual void CreatePartnershipComplete(WMPLib.IWMPSyncDevice pDevice, int hrResult) {
            _WMPOCXEvents_CreatePartnershipCompleteEvent createpartnershipcompleteEvent = new _WMPOCXEvents_CreatePartnershipCompleteEvent(pDevice, hrResult);
            this.parent.RaiseOnCreatePartnershipComplete(this.parent, createpartnershipcompleteEvent);
        }
        
        public virtual void DeviceEstimation(WMPLib.IWMPSyncDevice pDevice, int hrResult, long qwEstimatedUsedSpace, long qwEstimatedSpace) {
            _WMPOCXEvents_DeviceEstimationEvent deviceestimationEvent = new _WMPOCXEvents_DeviceEstimationEvent(pDevice, hrResult, qwEstimatedUsedSpace, qwEstimatedSpace);
            this.parent.RaiseOnDeviceEstimation(this.parent, deviceestimationEvent);
        }
        
        public virtual void CdromRipStateChange(WMPLib.IWMPCdromRip pCdromRip, WMPLib.WMPRipState wmprs) {
            _WMPOCXEvents_CdromRipStateChangeEvent cdromripstatechangeEvent = new _WMPOCXEvents_CdromRipStateChangeEvent(pCdromRip, wmprs);
            this.parent.RaiseOnCdromRipStateChange(this.parent, cdromripstatechangeEvent);
        }
        
        public virtual void CdromRipMediaError(WMPLib.IWMPCdromRip pCdromRip, object pMedia) {
            _WMPOCXEvents_CdromRipMediaErrorEvent cdromripmediaerrorEvent = new _WMPOCXEvents_CdromRipMediaErrorEvent(pCdromRip, pMedia);
            this.parent.RaiseOnCdromRipMediaError(this.parent, cdromripmediaerrorEvent);
        }
        
        public virtual void CdromBurnStateChange(WMPLib.IWMPCdromBurn pCdromBurn, WMPLib.WMPBurnState wmpbs) {
            _WMPOCXEvents_CdromBurnStateChangeEvent cdromburnstatechangeEvent = new _WMPOCXEvents_CdromBurnStateChangeEvent(pCdromBurn, wmpbs);
            this.parent.RaiseOnCdromBurnStateChange(this.parent, cdromburnstatechangeEvent);
        }
        
        public virtual void CdromBurnMediaError(WMPLib.IWMPCdromBurn pCdromBurn, object pMedia) {
            _WMPOCXEvents_CdromBurnMediaErrorEvent cdromburnmediaerrorEvent = new _WMPOCXEvents_CdromBurnMediaErrorEvent(pCdromBurn, pMedia);
            this.parent.RaiseOnCdromBurnMediaError(this.parent, cdromburnmediaerrorEvent);
        }
        
        public virtual void CdromBurnError(WMPLib.IWMPCdromBurn pCdromBurn, int hrError) {
            _WMPOCXEvents_CdromBurnErrorEvent cdromburnerrorEvent = new _WMPOCXEvents_CdromBurnErrorEvent(pCdromBurn, hrError);
            this.parent.RaiseOnCdromBurnError(this.parent, cdromburnerrorEvent);
        }
        
        public virtual void LibraryConnect(WMPLib.IWMPLibrary pLibrary) {
            _WMPOCXEvents_LibraryConnectEvent libraryconnectEvent = new _WMPOCXEvents_LibraryConnectEvent(pLibrary);
            this.parent.RaiseOnLibraryConnect(this.parent, libraryconnectEvent);
        }
        
        public virtual void LibraryDisconnect(WMPLib.IWMPLibrary pLibrary) {
            _WMPOCXEvents_LibraryDisconnectEvent librarydisconnectEvent = new _WMPOCXEvents_LibraryDisconnectEvent(pLibrary);
            this.parent.RaiseOnLibraryDisconnect(this.parent, librarydisconnectEvent);
        }
        
        public virtual void FolderScanStateChange(WMPLib.WMPFolderScanState wmpfss) {
            _WMPOCXEvents_FolderScanStateChangeEvent folderscanstatechangeEvent = new _WMPOCXEvents_FolderScanStateChangeEvent(wmpfss);
            this.parent.RaiseOnFolderScanStateChange(this.parent, folderscanstatechangeEvent);
        }
        
        public virtual void StringCollectionChange(object pdispStringCollection, WMPLib.WMPStringCollectionChangeEventType change, int lCollectionIndex) {
            _WMPOCXEvents_StringCollectionChangeEvent stringcollectionchangeEvent = new _WMPOCXEvents_StringCollectionChangeEvent(pdispStringCollection, change, lCollectionIndex);
            this.parent.RaiseOnStringCollectionChange(this.parent, stringcollectionchangeEvent);
        }
        
        public virtual void MediaCollectionMediaAdded(object pdispMedia) {
            _WMPOCXEvents_MediaCollectionMediaAddedEvent mediacollectionmediaaddedEvent = new _WMPOCXEvents_MediaCollectionMediaAddedEvent(pdispMedia);
            this.parent.RaiseOnMediaCollectionMediaAdded(this.parent, mediacollectionmediaaddedEvent);
        }
        
        public virtual void MediaCollectionMediaRemoved(object pdispMedia) {
            _WMPOCXEvents_MediaCollectionMediaRemovedEvent mediacollectionmediaremovedEvent = new _WMPOCXEvents_MediaCollectionMediaRemovedEvent(pdispMedia);
            this.parent.RaiseOnMediaCollectionMediaRemoved(this.parent, mediacollectionmediaremovedEvent);
        }
    }
}
