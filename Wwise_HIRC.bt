//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File:
//   Authors: Chainfailure, Shion
//   Version: 0.0.1
//   Purpose: Decode HIRC
//  Category: Game
// File Mask: *.hirc
//  ID Bytes: 48 49 52 42
//   History: 
//------------------------------------------------

enum <byte> ObjectType {
    State = 0x01,
    Sound = 0x02,
    Action = 0x03,
    Event = 0x04,
    RandomSequenceContainer = 0x05,
    SwitchContainer = 0x06,
    ActorMixer = 0x07,
    AudioBus = 0x08,
    LayerContainer = 0x09,
    MusicSegment = 0x0A,
    MusicTrack = 0x0B,
    MusicSwitchContainer =0x0C,
    MusicPlaylistContainer= 0x0D,
    Attenuation = 0x0E,
    DialogueEvent = 0x0F,
    MotionBus = 0x10,
    EffectCustom = 0x11,
    Effect = 0x12,
    AuxiliaryBus = 0x13,
};

enum <byte> AkPropBundleTypes {
    VoiceVolume = 0x00,
    VoicePitch = 0x02,
    VoiceLowPass = 0x03,
    VoiceHighPass = 0x04,
    BusVolume = 0x05,
    MakeUpGain = 0x06,
    PlaybackPriority = 0x07,
    PlaybackPriorityOffset = 0x08,
    MotionToVolumeOffset = 0x09,
    MotionLowPass = 0x0A,
    PositioningPannerX = 0x0C,
    PositioningPannerY = 0x0D,
    PositioningCenterPercentage = 0x0E,
    ActionDelay = 0x0F,
    TransitionTime = 0x10,
    Probability = 0x11,
    OverrideAuxBus0Volume = 0x13,
    OverrideAuxBus1Volume = 0x14,
    OverrideAuxBus2Volume = 0x15,
    OverrideAuxBus3Volume = 0x16,
    GameDefinedAuxSendVolume = 0x17,
    OverrideBusVolume = 0x18,
    OverrideBusHighPassFilter = 0x19,
    OverrideBusLowPassFilter = 0x20,
    HdrThreshold = 0x21,
    HdrRatio = 0x22,
    HdrReleaseTime = 0x23,
    HdrOutputGameParam = 0x24,
    HdrOutputGameParamMin = 0x25,
    HdrOutputGameParamMax = 0x26,
    HdrEnvelopeActiveRange = 0x27,
    MidiNoteTrackingUnknown = 0x2E,
    MidiTransposition = 0x2F,
    MidiVelocityOffset = 0x30,
    MidiFiltersKeyRangeMin = 0x31,
    MidiFiltersKeyRangeMax = 0x32,
    MidiFiltersVelocityRangeMin = 0x33,
    MidiFiltersVelocityRangeMax = 0x34,
    PlaybackSpeed = 0x36,
    MidiClipTempoSourceIsFile = 0x37,
    LoopTime = 0x3A,
    InitialDelay = 0x3B,
    AttenuationId = 0x46,
};

struct AkPropBundleShort {
    uint16 count;

    struct PaddedPropType {
        AkPropBundleTypes type;
        byte padding;
    } types [count];

    float values [count];
};

struct CAkState {
    AkPropBundleShort properties;
};

enum GraphPointInterpolation {
    Linear = 0x04,
    Constant = 0x09,
};

struct AkRTPCGraphPoint {
    float from;
    float to;
    GraphPointInterpolation interpolation;
};

struct CAkConversionTable {
    byte scaling;
    uint16 count;
    AkRTPCGraphPoint RTPCMgr[count];
};

enum <byte> Scaling {
    DB = 0x2,
};

struct RTPC {
    uint32 id;
    byte type;
    byte accum;
    byte parameterId;
    uint32 rtpcCurveId;
    Scaling scaling;
    uint16 pointCount;
    AkRTPCGraphPoint points[pointCount];
};

struct InitialRTPC {
    short count;
    RTPC RTPCs[count] <optimize=false>;
};

struct CAkAttentuation {
    byte isConeEnabled;
    byte curvesToUse[7];
    byte curveCount;
    CAkConversionTable curves[curveCount] <optimize=false>;
    InitialRTPC initialRTPC;
};

enum <byte> SourceType {
    Embedded = 0x0,
    Streamed = 0x1,
    Prefetch = 0x2,
};

struct AkMediaInformation {
    uint32 sourceId;
    uint32 inMemoryMediaSize;
    // TODO: make bitfield
    byte sourceFlags;
};

struct AkBankSourceData {
    uint32 plugin;
    SourceType sourceType;
    AkMediaInformation mediaInformation;
};

struct EffectItem {
    byte index;
    uint32 effectId;
    byte isShareSet;
    byte isRendered;
};

struct NodeInitialEffectParameters {
    byte isOverrideParentEffects;
    byte effectCount;

    if (effectCount > 0) {
        byte bypassFlags;
        EffectItem items[effectCount];    
    }
};

// AkPropBundle<AkPropValue, unsigned char>
struct AkPropBundleByte {
    byte count;

    AkPropBundleTypes types [count];
    float values [count];
};

enum <byte> RangeModifierProperty {
    Pitch = 0x2,
};

struct RangeModifiers {
    byte count;
    struct RangeModifier {
        RangeModifierProperty type;
        float min;
        float max;
    } rangeModifiers [count];
};

struct NodeInitialParameters {
    AkPropBundleByte propertyBundle;
    RangeModifiers rangeModifiers;
};

enum <byte> PannerType {
    DirectSpeakerAssignment = 0x0,
    BalanceFadeHeight = 0x1,
};

enum <byte> ThreeDimensionalPositionType {
    Emitter = 0x0,
    ListenerWithAutomation = 0x2,
};

enum <byte> SpatializationMode {
    PositionOnly = 0x1,
    PositionAndOrientation = 0x2,
};

enum <byte> PathMode {
    StepSequence = 0x0,
};

struct AkPathVertex {
    float x;
    float y;
    float z;
    int32 duration;
};

struct AkPathListItemOffset {
    uint32 verticesOffset;
    uint32 verticesCount;
};

struct Ak3DAutomationParams {
    float xRange;
    float yRange;
    float zRange;
};

struct PositioningParameters {
    byte overrideParent: 1;
    byte listenerRelativeRouting: 1;
    PannerType pannerType: 3;
    ThreeDimensionalPositionType threeDimensionalPositionType: 2;

    if (listenerRelativeRouting) {
        SpatializationMode spatializationMode: 3;
        byte enableAttenuation: 1;
        byte holdEmitterPositionAndOrientation: 1;
        byte holdListenerOrientation: 1;
        byte enableDiffraction: 1;
    }

    if (threeDimensionalPositionType != 0x0) {
        PathMode pathMode;
        int32 transitionTime;
        uint32 vertexCount;
        AkPathVertex vertices[vertexCount];

        uint32 playlistItemCount;
        AkPathListItemOffset playlistItems[playlistItemCount];
        Ak3DAutomationParams automationParameters[playlistItemCount];
    }
};

struct AuxiliaryParameters {
    //byte auxiliaryParameters;
    byte unk1: 2;
    byte overrideUserAuxSends: 1;
    byte hasAux: 1;
    byte overrideReflectionsAuxBus: 1;

    if (hasAux) {
        uint32 aux1;
        uint32 aux2;
        uint32 aux3;
        uint32 aux4;
    }

    uint32 reflectionsAuxiliaryBus;
};

enum <byte> VirtualQueueBehavior {
    PlayFromBeginning = 0x0,
    PlayFromElapsedTime = 0x1,
    Resume = 0x2,
};

enum <byte> BelowThresholdBehavior {
    ContinueToPlay = 0x0,
    KillVoice = 0x1,
    SetAsVirtualVoice = 0x2,
    KillIfOneShotElseVirtual = 0x3,
};

struct AdvSettingsParameters {
    byte flags1;
    VirtualQueueBehavior virtualQueueBehavior;
    uint16 maxInstanceCount;
    BelowThresholdBehavior belowThresholdBehavior;
    byte flags2;
};

struct AkStatePropertyInfo {
    byte propertyId;
    byte accumType;
    byte inDb;
};

enum <byte> StateSyncType {
    Immediate = 0x0,
};

struct AkState {
    uint32 stateId;
    uint32 stateInstanceId;
};

struct AkStateGroupChunk {
    uint32 stateGroupId;
    StateSyncType stateSyncType;
    byte stateCount;
    AkState states[stateCount];
};

struct StateChunk {
    byte statePropertyCount;
    AkStatePropertyInfo stateProperties[statePropertyCount];

    byte stateGroupCount;
    AkStateGroupChunk stateGroups[stateGroupCount] <optimize=false>;
};

struct NodeBaseParameters {
    NodeInitialEffectParameters initialEffectParameters;
    byte overrideAttachmentParameters;
    uint32 overrideBusId;
    uint32 parentId;
    // TODO: make bitfield
    byte unknownFlags;
    NodeInitialParameters initialParameters;
    PositioningParameters positioningParameters;
    AuxiliaryParameters auxiliaryParameters;
    AdvSettingsParameters advSettingsParameters;
    StateChunk stateChunk;
    InitialRTPC initialRTPC <optimize=false>;
};

struct CAkSound {
    AkBankSourceData bankSource;
    NodeBaseParameters nodeBaseParameters;
};

enum <uint16> ActionType {
    StopE = 0x0102,
    StopEO = 0x103,
    Play = 0x403,
    UnmuteAll = 0x704,
    SetState = 0x1204,
};

struct StopEActionParams {
    // TODO: implement bit mapping for these
    byte flags1;
    byte flags2;
    byte exceptionCount;
    // TODO: add exception list
};

struct StopEOActionParams {
    // TODO: implement bit mapping for these
    byte flags1;
    byte flags2;
    byte exceptionCount;
    // TODO: add exception list
};

struct PlayActionParams {
    // TODO: implement bit mapping for these
    byte flags1;
    uint32 bankId;
};

struct UnmuteAllActionParams {
    byte flags;
    byte exceptionCount;  
};

struct SetStateActionParams {
    uint32 stateGroupId;
    uint32 targetStateId;    
};

struct ActionInitialValues (ActionType actionType) {
    uint32 externalId;
    byte externalIdFlags;
    AkPropBundleByte propBundle;  
    RangeModifiers rangeModifiers;

    switch (actionType) {
        case StopE:
            StopEActionParams params;
        break;
        case StopEO:
            StopEOActionParams params;
        break;
        case Play:
            PlayActionParams params;
        break;
        case UnmuteAll:
            UnmuteAllActionParams params;
        break;
        case SetState:
            SetStateActionParams params;
        break;
    }
};

struct CAkAction {
    ActionType type;
    ActionInitialValues initialValues(type);
};

struct EventInitialValues {
    uint32 externalId;
    byte externalIdFlags;
    AkPropBundleByte propBundle;  
    RangeModifiers rangeModifiers;
};

struct CAkEvent {
    byte actionCount;
    uint32 actions[actionCount];
};

enum <byte> TransitionMode {
    Disabled = 0x0,
};

enum <byte> RandomMode {
    Normal = 0x0,
    Shuffle = 0x1,
};

enum <byte> RandomSequenceContainerMode {
    Random = 0x0,
    Sequence = 0x1,
};

struct CAkPlaylistItem {
    uint32 playId;
    int32 weight;
};

struct CAkPlaylist {
    uint16 count;
    CAkPlaylistItem items[count];    
};

struct Children {
    uint32 count;
    uint32 children[count];
};

struct RandomSequenceContainerInitialValues {
    NodeBaseParameters nodeBaseParameters;

    uint16 loopCount;
    uint16 loopModMin;
    uint16 loopModMax;
    float transitionTime;
    float transitionTimeModMin;
    float transitionTimeModMax;
    uint16 avoidRepeatCount;
    TransitionMode transitionMode;
    RandomMode randomMode;
    RandomSequenceContainerMode mode;
    byte flags;
    Children children;
    CAkPlaylist playlist;
};

struct CAkRandomSequenceContainer {
    RandomSequenceContainerInitialValues initialValues;
};

struct ActorMixerInitialValues {
    NodeBaseParameters nodeBaseParameters;
    Children children;
};

struct CAkActorMixer {
    ActorMixerInitialValues initialValues;
};

struct LayerContainerInitialValues {
    NodeBaseParameters nodeBaseParameters;
    Children children;
    uint32 layerCount;
    // TODO: implement layer destructuring
    byte isContinuousValidation;
};

struct CAkLayerContainer {
    LayerContainerInitialValues initialValues;
};

struct AkMeterInfo {
    double gridPeriod;
    double gridOffset;
    float tempo;
    byte numBeats;
    byte beatValue;
};

struct AkMusicMarkerWwise {
    uint32 id;
    double position;
    uint32 stringSize;
    if (stringSize > 0) {
        string markerName;
    }
};

struct MusicNodeParameters {
    byte flags;
    NodeBaseParameters nodeBaseParameters;
    Children children;
    AkMeterInfo meterInfo;
    byte meterFlags;
    uint32 stingerCounter;
    // TODO: add stingers
    double duration;
    uint32 markerCount;
    AkMusicMarkerWwise markers[markerCount] <optimize=false>;
};

struct MusicSegmentInitialValues {
    MusicNodeParameters musicNodeParameters;
};

struct CAkMusicSegment {
    MusicSegmentInitialValues initialValues;
};

struct AkTrackSourceInfo {
    uint32 trackId;
    uint32 sourceId;
    uint32 eventId;
    double playAt;
    double beginTrimOffset;
    double endTrimOffset;
    double sourceDuration;
};

enum <uint32> AutomationType {
    Volume = 0x00,
    FadeIn = 0x03,
};

struct AkClipAutomation {
    uint32 clipIndex;
    AutomationType automationType;
    uint32 pointCount;
    AkRTPCGraphPoint points[pointCount];
};

struct MusicTrackInitialValues {
    // TODO: split up flags
    byte flags;
    uint32 sourceCount;
    AkBankSourceData sources[sourceCount];
    uint32 playlistItemCount;
    AkTrackSourceInfo playlist[playlistItemCount];
    uint32 subtrackCount;
    uint32 clipAutomationItemCount;
    AkClipAutomation clipAutomationItems[clipAutomationItemCount] <optimize=false>;
    NodeBaseParameters nodeBaseParameters;
    // TODO: make enum
    byte trackType;
    uint32 lookAheadTime;
};

struct CAkMusicTrack {
    MusicTrackInitialValues initialValues;
};

struct ObjectContainer {
    ObjectType type;
    uint32 size;
    uint32 id;

    switch (type) {
        case State:
            CAkState object <optimize=false>;
        break;
        case Sound:
            CAkSound object <optimize=false>;
        break;
        case Action:
            CAkAction object <optimize=false>;
        break;
        case Event:
            CAkEvent object <optimize=false>;
        break;
        case RandomSequenceContainer:
            CAkRandomSequenceContainer object <optimize=false>;
        break;
        case ActorMixer:
            CAkActorMixer object <optimize=false>;
        break;
        case LayerContainer:
            CAkLayerContainer object <optimize=false>;
        break;
        case MusicSegment:
            CAkMusicSegment object <optimize=false>;
        break;
        case MusicTrack:
            CAkMusicTrack object <optimize=false>;
        break;
        case Attenuation:
            CAkAttentuation object <optimize=false>;
        break;
        default:
            byte data [size - 4];
        break;
    }
};

string ObjectContainerName(ObjectContainer &container) {
    return Str("%s - %u ", EnumToString(container.type), container.id);
}

struct WwiseHIRCSection {
    struct Header {
        char magic [4];
        uint32 sectionSize;
        uint32 objectCount;
    } header;

     ObjectContainer objectContainers[header.objectCount] <optimize=false, name=ObjectContainerName>;
} file;